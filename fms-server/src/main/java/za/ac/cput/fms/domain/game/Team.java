package za.ac.cput.fms.domain.game;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.*;
import za.ac.cput.fms.domain.personal.Manager;
import za.ac.cput.fms.domain.personal.Player;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
@Getter
@Setter
@Table(name = "team")
public class Team {
    @Id
    @Column(name = "team_id", nullable = false)
    private String id;
    private String teamName;
    private int titlesWon;
    private final int maxPlayers = 3;

    //Parent Relationship in Tournament, Although a Tournament can have many teams and a Team can be part of many tournaments
    @JsonIgnore
    @ManyToMany(mappedBy = "assignedTeams")
    private Set<Tournament> tournamentSet  = new HashSet<>();

    @ManyToMany
    @JoinTable(name = "team_manager",
            joinColumns = @JoinColumn(name = "team_id"),
            inverseJoinColumns = @JoinColumn(name = "manager_id")
    )
    private Set<Manager> teamManager = new HashSet<>();

/**
    @OneToMany(cascade = CascadeType.ALL)
    @JoinColumn(name = "fk_team_id", referencedColumnName = "team_id")
    private List<Player> players;
 */

    @ManyToMany
    @JoinTable(name = "team_players",
            joinColumns = @JoinColumn(name = "team_id"),
            inverseJoinColumns = @JoinColumn(name = "player_id")
    )
    private Set<Player> teamPlayers = new HashSet<>();


    // TODO: OneToOne for Team and Venue
    // Change this to OneToOne or make sure on client Side no more than 1 venue can be added to a team.
    @ManyToMany
    @JoinTable(name = "team_venue",
            joinColumns = @JoinColumn(name = "team_id"),
            inverseJoinColumns = @JoinColumn(name = "venue_id")
    )
    private Set<Venue> teamHomeVenue = new HashSet<>();

    //
    @JsonIgnore
    @ManyToMany(mappedBy = "fixtureTeams")
    private Set<Fixture> fixtureSet = new HashSet<>();

    public Team(Builder builder) {
        this.id = builder.id;
        this.teamName = builder.teamName;
        this.titlesWon = builder.titlesWon;
    }

    public Team() {

    }

    // Getters, Setters and ToString generated by lombok @Data annotation


    public static class Builder{
        private String id;
        private String teamName;
        private int titlesWon;

        public Builder setId(String id) {
            this.id = id;
            return this;
        }

        public Builder setTeamName(String teamName) {
            this.teamName = teamName;
            return this;
        }

        public Builder setTitlesWon(int titlesWon) {
            this.titlesWon = titlesWon;
            return this;
        }

        public Builder copy(Team team){
            this.id = team.id;
            this.teamName = team.teamName;
            this.titlesWon = team.titlesWon;
            return this;
        }

        public Team build(){
            return new Team(this);
        }
    }
}